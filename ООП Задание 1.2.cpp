/*Добавить к классу MyString (см. предыдущие ДЗ) оператор присваивания копированием, конструктор перемещения
и оператор присваивания перемещением. В итоге в классе MyString обязательно должны быть деструктор,
конструктор копирования, оператор присваивания копированием, конструктор перемещения и оператор присваивания перемещением
(правило пяти).*/

#include <iostream>
#include"String.h"
using namespace std;

int main()
{
    setlocale(LC_ALL, "Ru");

    //String test1, test2, test3, test4;

    //String c1(20), c2(40);
    //char* str = (char*)"123456";
    //String f(str);

    //cout << String::Counter();// На экране 7

    /*const char* S = new char[100];
    S = "Test";
    String Str1(S);
    String Str2(Str1);*/

    //cout << endl;
    //Str1.Output();
    //cout << endl;
    //Str2.Output();

    String A;
    String StrX;
        
    A.Input();
    A.Output();

    int a = 1;
    while (a != 0) {
        cout << "\n\nВыберите необходимое действие:\n"
            "0. Завершение;\n"
            "1. Добавление к концу строки одного символа 'x';\n"
            "2. Удаление одного символа из конца нашего объекта - строки;\n"
            "3. Добавление к концу строки определенного количества символов 'x';\n"
            "4. Удаление определенного количества символов из конца нашей строки.\n"
            "5. Перегрузку оператора++ в постфиксной форме(добавление к концу нашего объекта - строки одного символа 'x')\n"
            "6. Перегрузку оператора-- в постфиксной форме(удаление одного символа из конца нашего объекта - строки).\n"
            "7. Перегрузку оператора+ int + MyString(добавление к началу строки определенного количества символов 'x').\n"
            "8. Перегрузку оператора<< для вывода на экран объекта типа String.\n"
            "9. Применение конструктора перемещения,"
            "применение оператора присваивания с копированием и оператора присваивания с перемещением.\n";
        cin >> a;
        switch (a) {
        case 0: {
            break;
        }
        case 1: {
            String NewA = ++A;
            NewA.Output();
        }
              break;
        case 2: {
            
            String NewA = --A;
            NewA.Output();
        }
              break;
        case 3: {
            int Quantity;
            cout << "Введите сколько необходимо добавить символов: ";
            cin >> Quantity;
            String NewA = A + Quantity;
            NewA.Output();
        }
              break;
        case 4: {
            int Quantity;
            cout << "Введите сколько необходио удалить символов: ";
            cin >> Quantity;
            String NewA = A - Quantity;
            NewA.Output();
        }
              break;
        case 5: {
            String NewA = A++;
            NewA.Output();//сначала возвращаем,
            cout << endl;
            A.Output();   //потом изменяем
        }
              break;
        case 6: {
            String NewA = A--;
            NewA.Output();//сначала возвращаем,
            cout << endl;
            A.Output();   //потом изменяем
        }
              break;
        case 7: {
            int Quantity;
            cout << "Введите сколько необходимо добавить символов: ";
            cin >> Quantity;
            String NewA = Quantity + A;
            NewA.Output();
        }
              break;
        case 8: {
            cout << A;
        }
              break;
        case 9: {
            String B("Hello!");
            cout << "Объект В = ";
            B.Output();
            String M("People!");
            cout << "\nОбъект M = ";
            M.Output();
            String C = Func();//применение конструктора перемещения
            cout << "\n\nОбъект C = объекту Н.\n(Объект Н создан в функции. Применение конструктора перемещения)\n";
            cout << "Объект C = ";
            C.Output();
            String D = move(B);//применение конструктора перемещения
            cout << "\n\nОбъект D = объекту B.\n(Применение конструктора перемещения)\n";
            cout << "Объект D = ";
            D.Output();
            C = D;//применен оператор присваивания с копированием
            cout << "\n\nОбъект C = объекту D.\n(Применение оператора присваивания с копированием)\nОбъект C = ";
            C.Output();
            C = move(M);//применен оператор присваивания с перемещением
            cout << "\n\nОбъект C = объекту М.\n(Применение  оператора присваивания с перемещением)\nОбъект C = ";
            C.Output();
        }
              break;
        default:cout << "неправельно выбраный вариант действия!";
        }
    }
    return 0;
}

